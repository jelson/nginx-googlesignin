server {
       server_name your-site-name.example.com;
       listen 80;
       listen [::]:80;

       return 301 https://$host$request_uri;


}

server {
        listen 443 ssl;
        listen [::]:443 ssl;

        access_log /var/log/nginx/video-access.log;
        error_log  /var/log/nginx/video-error.log;

        server_name your-site-name.example.com;

        root /home/jelson/projects/videoserver/htmlroot;

        location = / {
                return 301 /v;
        }

        location /v {
               auth_request /auth/check_auth;

               # The statement below creates a new local variable "new_cookie"
               # from the special variable $sent_http_set_cookie, defined by
               # nginx as the Set-Cookie header returned by the auth server. For
               # details, see the nginx docs:
               # https://nginx.org/en/docs/http/ngx_http_core_module.html#var_sent_http_
               # https://nginx.org/en/docs/http/ngx_http_auth_request_module.html#auth_request_set
               auth_request_set $new_cookie $sent_http_set_cookie

               # Propagate the Set-Cookie header sent by the auth server back up
               # to our response to the client
               add_header Set-Cookie $new_cookie

               # 401 from the auth server means to start the auth flow
               error_page 401 @login;

               # 403 from the auth server means the client presented valid
               # credentials for a user that is not allowed; deny the request
               error_page 403 "/not-authorized.html";

               alias /mnt/media/Video/;
               fancyindex on;
               fancyindex_name_length 255;
               fancyindex_exact_size off;
        }

        location @login {
               return 302 /google-login.html?r=$request_uri;
        }

        location /auth {
               proxy_pass http://localhost:17000;
               proxy_pass_request_body off;
               proxy_set_header Content-Length "";
        }

    ssl_certificate /etc/foo/your-site.crt; # managed by Certbot
    ssl_certificate_key /foo/etc/yoursite.pem; # managed by Certbot
}
